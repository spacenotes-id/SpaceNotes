// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: space_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSpace = `-- name: CreateSpace :one
INSERT INTO spaces (name, emoji, is_locked, user_id) VALUES ($1, $2, $3, $4)
RETURNING id, user_id, name, emoji, is_locked, created_at
`

type CreateSpaceParams struct {
	Name     string      `json:"name"`
	Emoji    pgtype.Text `json:"emoji"`
	IsLocked bool        `json:"is_locked"`
	UserID   int32       `json:"user_id"`
}

type CreateSpaceRow struct {
	ID        int32            `json:"id"`
	UserID    int32            `json:"user_id"`
	Name      string           `json:"name"`
	Emoji     pgtype.Text      `json:"emoji"`
	IsLocked  bool             `json:"is_locked"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateSpace(ctx context.Context, arg CreateSpaceParams) (*CreateSpaceRow, error) {
	row := q.db.QueryRow(ctx, createSpace,
		arg.Name,
		arg.Emoji,
		arg.IsLocked,
		arg.UserID,
	)
	var i CreateSpaceRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Emoji,
		&i.IsLocked,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteSpace = `-- name: DeleteSpace :exec
DELETE FROM spaces WHERE id = $1
`

func (q *Queries) DeleteSpace(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSpace, id)
	return err
}

const findAllSpacesByUserID = `-- name: FindAllSpacesByUserID :many
SELECT id, name, emoji, is_locked, created_at, updated_at FROM spaces 
WHERE user_id = $1 ORDER BY id
`

type FindAllSpacesByUserIDRow struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Emoji     pgtype.Text      `json:"emoji"`
	IsLocked  bool             `json:"is_locked"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) FindAllSpacesByUserID(ctx context.Context, userID int32) ([]*FindAllSpacesByUserIDRow, error) {
	rows, err := q.db.Query(ctx, findAllSpacesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FindAllSpacesByUserIDRow{}
	for rows.Next() {
		var i FindAllSpacesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Emoji,
			&i.IsLocked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSpaceByID = `-- name: FindSpaceByID :one
SELECT id, user_id, name, emoji, is_locked, created_at, updated_at FROM spaces WHERE id = $1 LIMIT 1
`

func (q *Queries) FindSpaceByID(ctx context.Context, id int32) (*Space, error) {
	row := q.db.QueryRow(ctx, findSpaceByID, id)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Emoji,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateSpace = `-- name: UpdateSpace :one
UPDATE spaces
SET
  name = COALESCE($2, name),
  emoji = COALESCE($3, emoji),
  is_locked = COALESCE($4, is_locked),
  updated_at = $5
WHERE id = $1
RETURNING id, name, emoji, is_locked, created_at, updated_at
`

type UpdateSpaceParams struct {
	ID        int32            `json:"id"`
	Name      pgtype.Text      `json:"name"`
	Emoji     pgtype.Text      `json:"emoji"`
	IsLocked  pgtype.Bool      `json:"is_locked"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type UpdateSpaceRow struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Emoji     pgtype.Text      `json:"emoji"`
	IsLocked  bool             `json:"is_locked"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateSpace(ctx context.Context, arg UpdateSpaceParams) (*UpdateSpaceRow, error) {
	row := q.db.QueryRow(ctx, updateSpace,
		arg.ID,
		arg.Name,
		arg.Emoji,
		arg.IsLocked,
		arg.UpdatedAt,
	)
	var i UpdateSpaceRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emoji,
		&i.IsLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
